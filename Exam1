#include<iostream>
#include<string>
#include<exception>
#include<vector>
#include<regex>
#include<thread>
#include<mutex>
using namespace std;

mutex m;
const char* PORUKA = "\n-------------------------------------------------------------------------------\n"
"1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR\n"
"2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA CE BITI OZNACENO KAO RE\n"
"3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA\n"
"4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORISTENI U TESTNOM CODE-U,\n"
"\tOSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE\n"
"\tPOMOCNE FUNKCIJE MOZETE IMENOVATI I DODAVATI PO ZELJI.\n"
"5. IZUZETAK BACITE SAMO U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.\n"
"6. FUNKCIJE KOJE NE IMPLEMENTIRATE TREBAJU BITI OBRISANE!\n"
"7. RJESENJA ZADATKA POSTAVITE NA FTP SERVER U ODGOVARAJUCI FOLDER!\n"
"-------------------------------------------------------------------------------\n";

const char* crt = "\n-------------------------------------------\n";
enum eRazred { PRVI = 1, DRUGI, TRECI, CETVRTI };

char* GetNizKaraktera(const char* sadrzaj, bool dealociraj = false) {
	if (sadrzaj == nullptr)return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	if (dealociraj)
		delete[]sadrzaj;
	return temp;
}
bool ValidirajEmail(string email) {
	return regex_search(email, regex("[A-Za-z]{1,}\\.?[A-Za-z]{1,}\\@(edu\\.)?fit.(ba|org|com)"));
}
template<class T1, class T2>
class Kolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int _trenutno;
	bool _omoguciDupliranje;
public:
	Kolekcija(bool omoguciDupliranje = true) {
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_omoguciDupliranje = omoguciDupliranje;
	}
	Kolekcija(const Kolekcija& obj) {
		_trenutno = obj._trenutno;
		_omoguciDupliranje = obj._omoguciDupliranje;
		_elementi1 = new T1[_trenutno];
		_elementi2 = new T2[_trenutno];
		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}
	}
	Kolekcija& operator=(const Kolekcija& obj) {
		if (this != &obj) {
			_trenutno = obj._trenutno;
			_omoguciDupliranje = obj._omoguciDupliranje;
			delete[]_elementi1;
			delete[]_elementi2;
			_elementi1 = new T1[_trenutno];
			_elementi2 = new T2[_trenutno];
			for (int i = 0; i < _trenutno; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}
		}
		return *this;
	}
	void AddElement(T1 obj1, T2 obj2) {
		if (!_omoguciDupliranje) {
			for (int i = 0; i < _trenutno; i++)
			{
				if (_elementi1[i] == obj1 && _elementi2[i] == obj2) {
					throw exception("Dupliciranje nije moguce");
				}
			}
		}
		T1* temp1 = new T1[_trenutno + 1];
		T2* temp2 = new T2[_trenutno + 1];
		for (int i = 0; i < _trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}
		delete[]_elementi1;
		delete[]_elementi2;
		temp1[_trenutno] = obj1;
		temp2[_trenutno] = obj2;
		_elementi1 = temp1; temp1 = nullptr;
		_elementi2 = temp2; temp2 = nullptr;
		_trenutno++;
	}
	Kolekcija operator()(int pocetak, int kraj) {
		if ((kraj - pocetak) > _trenutno)
			throw exception(("Imamo " + to_string(_trenutno) + " elemenata").c_str());
		if (pocetak < 0)
			throw exception(("Lokacija " + to_string(pocetak) + " ne postoji").c_str());
		if (kraj > _trenutno)
			throw exception(("Lokacija " + to_string(kraj) + " ne postoji").c_str());
		Kolekcija<T1, T2>kolekcija3;
		kolekcija3._omoguciDupliranje = _omoguciDupliranje;
		for (int i = pocetak; i <= kraj; i++)
		{
			kolekcija3.AddElement(_elementi1[i], _elementi2[i]);
		}
		return kolekcija3;
	}
	~Kolekcija() {
		delete[]_elementi1; _elementi1 = nullptr;
		delete[]_elementi2; _elementi2 = nullptr;
	}

	T1& getElement1(int lokacija)const { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija)const { return _elementi2[lokacija]; }
	int getTrenutno() const { return _trenutno; }
	friend ostream& operator<< (ostream& COUT, const Kolekcija& obj) {
		for (size_t i = 0; i < obj._trenutno; i++)
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}
};
class Datum {
	int* _dan, * _mjesec, * _godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}
	Datum(const Datum& obj) {
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
	}
	Datum& operator=(const Datum& obj) {
		if (this != &obj) {
			*_dan = (*obj._dan);
			*_mjesec = (*obj._mjesec);
			*_godina = (*obj._godina);
		}
		return *this;
	}
	int GetDani() {
		return *_dan + *_mjesec * 30 + *_godina * 365;
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	bool operator==(const Datum& obj) {
		return *_dan == *obj._dan && *_mjesec == *obj._mjesec && *_godina == *obj._godina;
	}
	friend ostream& operator<< (ostream& COUT, const Datum& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;
		return COUT;
	}
};

class Predmet {
	char* _naziv;
	//int se odnosi na ocjenu u opsegu od 1 â€“ 5, a datum na momenat postizanja ocjene
	Kolekcija<int, Datum> _ocjene;
public:
	Predmet(const char* naziv = "", int ocjena = 0, Datum datum = Datum()) {
		_naziv = GetNizKaraktera(naziv);
		if (ocjena > 0)
			_ocjene.AddElement(ocjena, datum);
	}
	Predmet(const Predmet& obj) {
		_naziv = GetNizKaraktera(obj._naziv);
		_ocjene = obj._ocjene;
	}
	Predmet& operator=(const Predmet& obj) {
		if (this != &obj) {
			delete[] _naziv;
			_naziv = GetNizKaraktera(obj._naziv);
			_ocjene = obj._ocjene;
		}
		return *this;
	}
	bool operator==(const Predmet& obj) {
		return strcmp(_naziv, obj._naziv) == 0;
	}
	~Predmet() {
		delete[] _naziv; _naziv = nullptr;
	}
	void AddOcjena(int ocjena, Datum datum) {
		if (ocjena < 1 || ocjena > 5)
			return;//throw exception("Ocjena mora biti u rasponu od 5 do 10");
		_ocjene.AddElement(ocjena, datum);
	}
	char* getnaziv() { return _naziv; }
	Kolekcija<int, Datum>& getocjene() { return _ocjene; }

	friend ostream& operator<< (ostream& COUT, const Predmet& obj) {
		COUT << obj._naziv << endl;
		COUT << obj._ocjene << endl;
		float prosjek = 0;
		for (int i = 0; i < obj._ocjene.getTrenutno(); i++)
		{
			prosjek += obj._ocjene.getElement1(i);
		}
		prosjek /= obj._ocjene.getTrenutno();
		COUT << "Prosjecna ocjena na predmetu " << obj._naziv << " je -> " << prosjek << "!" << endl;
		return COUT;
	}
};
class Uspjeh {
	eRazred _razred;
	//string se odnosi na napomenu o polozenom predmetu
	Kolekcija<Predmet, string>* _polozenipredmeti;
public:
	Uspjeh(eRazred razred = PRVI) {
		_razred = razred;
	}
	Uspjeh(const Uspjeh& obj) {
		_razred = obj._razred;
		_polozenipredmeti = new Kolekcija<Predmet, string>(*obj._polozenipredmeti);
	}
	Uspjeh& operator=(const Uspjeh& obj) {
		if (this != &obj) {
			_razred = obj._razred;
			delete _polozenipredmeti;
			_polozenipredmeti = new Kolekcija<Predmet, string>(*obj._polozenipredmeti);
		}
		return *this;
	}
	void DodajPredmet(Predmet& p, string s) {
		if (_polozenipredmeti == nullptr) _polozenipredmeti = new Kolekcija<Predmet, string>();
		_polozenipredmeti->AddElement(p, s);
	}
	~Uspjeh() { delete _polozenipredmeti; _polozenipredmeti = nullptr; }
	Kolekcija<Predmet, string>* GetPredmeti() { return _polozenipredmeti; }
	eRazred GeteRazred() { return _razred; }
	friend ostream& operator<< (ostream& cout, const Uspjeh& obj) {
		cout << "Razred -> " << obj._razred << ", polozeni: " << *obj._polozenipredmeti << endl;
		return cout;
	}
};

class Kandidat {
	char* _imePrezime;
	string _emailAdresa;
	string _brojTelefona;
	vector<Uspjeh> _uspjeh;
public:
	Kandidat(const char* imePrezime, string emailAdresa, string brojTelefona) {
		_imePrezime = GetNizKaraktera(imePrezime);
		if (ValidirajEmail(emailAdresa)) {
			_emailAdresa = emailAdresa;
		}
		else _emailAdresa = "notSet@edu.fit.ba";
		_brojTelefona = brojTelefona;
	}
	Uspjeh* operator[](eRazred razred) {
		Uspjeh* u = new Uspjeh;
		for (int i = 0; i < _uspjeh.size(); i++)
		{
			if (_uspjeh[i].GeteRazred() == razred) {
				for (int j = 0; j < _uspjeh[i].GetPredmeti()->getTrenutno(); j++)
				{
					u->DodajPredmet(_uspjeh[i].GetPredmeti()->getElement1(j), _uspjeh[i].GetPredmeti()->getElement2(j));
				}
				return u;
			}
		}
	}
	~Kandidat() {
		delete[] _imePrezime; _imePrezime = nullptr;
	}
	Kolekcija<Predmet, float> operator()(Datum prvi, Datum drugi) {
		Kolekcija<Predmet, float> kolekcijaPredmeta;
		bool sadrze = false;
		float prosjek = 0;
		for (int i = 0; i < _uspjeh.size(); i++)
		{
			for (int j = 0; j < _uspjeh[i].GetPredmeti()->getTrenutno(); j++)
			{
				for (int k = 0; k < _uspjeh[i].GetPredmeti()->getElement1(j).getocjene().getTrenutno(); k++)
				{
					if (_uspjeh[i].GetPredmeti()->getElement1(i).getocjene().getElement2(k).GetDani() > prvi.GetDani()
						&& _uspjeh[i].GetPredmeti()->getElement1(i).getocjene().getElement2(k).GetDani() < drugi.GetDani())
						sadrze = true;
					if (k != 0)
						prosjek += (_uspjeh[i].GetPredmeti()->getElement1(i).getocjene().getElement2(k).GetDani() -
							_uspjeh[i].GetPredmeti()->getElement1(i).getocjene().getElement2(k - 1).GetDani());
				}
				if (_uspjeh[i].GetPredmeti()->getElement1(j).getocjene().getTrenutno() > 0) {
					if (_uspjeh[i].GetPredmeti()->getElement1(j).getocjene().getTrenutno() > 1)
						prosjek /= (_uspjeh[i].GetPredmeti()->getElement1(j).getocjene().getTrenutno() - 1);
					else prosjek = 0;
					if (sadrze)
						kolekcijaPredmeta.AddElement(_uspjeh[i].GetPredmeti()->getElement1(j), prosjek);
					sadrze = false;
				}
			}
		}
		return kolekcijaPredmeta;
	}
	bool AddPredmet(eRazred razred, Predmet predmet, string opis) {
		float prosjek = 0;
		bool postojiUspjeh = false;
		for (int i = 0; i < predmet.getocjene().getTrenutno(); i++)
		{
			prosjek += predmet.getocjene().getElement1(i);
		}
		prosjek /= predmet.getocjene().getTrenutno();
		if (prosjek < 2.5)
			return false;
		for (int i = 0; i < _uspjeh.size(); i++)
		{
			if (razred == _uspjeh[i].GeteRazred()) {
				if (_uspjeh[i].GetPredmeti()->getTrenutno() == 5)
					return false;
				for (int j = 0; j < _uspjeh[i].GetPredmeti()->getTrenutno(); j++)
				{
					if (predmet == _uspjeh[i].GetPredmeti()->getElement1(j))
						return false;
				}
				_uspjeh[i].DodajPredmet(predmet, opis);
				if (_uspjeh[i].GetPredmeti()->getTrenutno() == 5) {
					float prosjekPoPredmetu = 0, prosjekPoRazredu = 0, prosjekPoTrazenomRazredu = 0, prosjekUkupno = 0;
					for (int i = 0; i < _uspjeh.size(); i++)
					{
						prosjekPoRazredu = 0;
						for (int j = 0; j < _uspjeh[i].GetPredmeti()->getTrenutno(); j++)
						{
							prosjekPoPredmetu = 0;
							for (int k = 0; k < _uspjeh[i].GetPredmeti()->getElement1(j).getocjene().getTrenutno(); k++)
							{
								prosjekPoPredmetu += _uspjeh[i].GetPredmeti()->getElement1(j).getocjene().getElement1(k);
							}
							prosjekPoPredmetu /= _uspjeh[i].GetPredmeti()->getElement1(j).getocjene().getTrenutno();
							prosjekPoRazredu += prosjekPoPredmetu;
							if (razred == _uspjeh[i].GeteRazred())
								prosjekPoTrazenomRazredu += prosjekPoPredmetu;
						}
						prosjekPoRazredu /= _uspjeh[i].GetPredmeti()->getTrenutno();
						if (razred == _uspjeh[i].GeteRazred())
							prosjekPoTrazenomRazredu /= _uspjeh[i].GetPredmeti()->getTrenutno();
						prosjekUkupno += prosjekPoRazredu;
					}
					prosjekUkupno /= prosjekPoRazredu;
					Uspjeh u = _uspjeh[i];
					thread t([this, u, razred, prosjekPoTrazenomRazredu, prosjekUkupno]() {
						m.lock();
						cout << crt;
						cout << "From:info@fit.ba" << endl;
						cout << "TO: " << this->GetEmail();
						cout << "Postovani " << this->GetImePrezime() << ", evidentirali ste uspjeh za " << razred << " razred. Dosadasni uspjeh (prosjek)" << endl;
						cout << "na nivou " << razred << " razreda iznosi " << prosjekPoTrazenomRazredu << " a ukupan uspjeh u toku skolovanja je " << prosjekUkupno << endl;
						cout << "Pozdrav." << endl;
						cout << "FIT Team." << endl;
						m.unlock();
						});
					t.join();
					thread t2([prosjekPoRazredu, razred]() {
						m.lock();
						cout << "Svaka cast za uspjeh " << prosjekPoRazredu << " u " << razred << " razredu.";
						m.unlock();
						});
					t2.join();
					cout << crt;
				}
				postojiUspjeh = true;
			}
		}
		if (!postojiUspjeh) {
			Uspjeh u(razred);
			u.DodajPredmet(predmet, opis);
			_uspjeh.push_back(u);
		}
		return true;
	}
	friend ostream& operator<< (ostream& COUT, Kandidat& obj) {
		COUT << obj._imePrezime << " " << obj._emailAdresa << " " << obj._brojTelefona << endl;
		for (size_t i = 0; i < obj._uspjeh.size(); i++)
			COUT << obj._uspjeh[i];
		return COUT;
	}
	vector<Uspjeh>& GetUspjeh() { return _uspjeh; }
	string GetEmail() { return _emailAdresa; }
	string GetBrojTelefona() { return _brojTelefona; }
	char* GetImePrezime() { return _imePrezime; }

};
const char* GetOdgovorNaPrvoPitanje() {
	cout << "Pitanje -> Na sta se odnosi pojam reprezentacije tipa?\n";
	return "Odgovor -> Odnosi se na atribute i metode tog tipa";
}
const char* GetOdgovorNaDrugoPitanje() {
	cout << "Pitanje -> Na koji nacin se moze izbjeci pojavljivanje vise podobjekata bazne klase u slucaju visestrukog nasljedjivanja?\n";
	return "Odgovor -> Pomocu virtualnog nasljedjivanja";
}

void main() {

	cout << PORUKA;
	cin.get();

	cout << GetOdgovorNaPrvoPitanje() << endl;
	cin.get();
	cout << GetOdgovorNaDrugoPitanje() << endl;
	cin.get();

	Datum temp,
		datum19062019(19, 6, 2019),
		datum20062019(20, 6, 2019),
		datum30062019(30, 6, 2019),
		datum05072019(5, 7, 2019);

	int kolekcijaTestSize = 9;
	Kolekcija<int, int> kolekcija1(false);
	for (int i = 0; i <= kolekcijaTestSize; i++)
		kolekcija1.AddElement(i, i);

	try {
		//ukoliko nije dozvoljeno dupliranje elemenata (provjeravaju se T1 i T2), metoda AddElement baca izuzetak
		kolekcija1.AddElement(3, 3);
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}
	cout << kolekcija1 << crt;

	/*objekat kolekcija2 ce biti inicijalizovan elementima koji se u objektu kolekcija1 nalaze na lokacijama 1 - 4
	ukljucujuci i te lokacije. u konkretnom primjeru to ce biti parovi sa vrijednostima: 1 1 2 2 3 3 4 4*/
	Kolekcija<int, int> kolekcija2 = kolekcija1(1, 4);
	cout << kolekcija2 << crt;
	try {
		//primjeri u kojima opseg nije validan, te bi funkcija trebala baciti izuzetak
		Kolekcija<int, int> temp1 = kolekcija1(1, 14);//imamo 10 elemenata
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}
	try {
		//primjeri u kojima opseg nije validan, te bi funkcija trebala baciti izuzetak
		Kolekcija<int, int> temp2 = kolekcija1(-1, 8);//lokacija -1 ne postoji
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}

	//parametri: nazivPredmeta, prva ocjena, datum
	Predmet Matematika("Matematika", 5, datum19062019),
		Fizika("Fizika", 5, datum20062019),
		Hemija("Hemija", 2, datum30062019),
		Engleski("Engleski", 5, datum05072019);

	Matematika.AddOcjena(3, datum05072019);
	Matematika.AddOcjena(5, datum05072019);

	// ispisuje: naziv predmeta, ocjene (zajedno sa datumom polaganja) i prosjecnu ocjenu na predmetu
	// ukoliko predmet nema niti jednu ocjenu prosjecna treba biti 0
	cout << Matematika << endl;

	if (ValidirajEmail("text.text@edu.fit.ba"))
		cout << "Email validan" << crt;
	if (ValidirajEmail("texttext@edu.fit.ba"))
		cout << "Email validan" << crt;
	if (ValidirajEmail("texttext@fit.ba"))
		cout << "Email validan" << crt;
	if (ValidirajEmail("texttext@fit.com"))
		cout << "Email validan" << crt;
	if (ValidirajEmail("texttext@edu.fit.org"))
		cout << "Email validan" << crt;

	///*
	//email adresa mora biti u formatu text.text (sa ili bez tacke),
	//dok domena moze biti fit.ba ili edu.fit.ba
	//nakon institucije (fit ili edu.fit), osim drzavne (.ba), dozvoljene su domene .com i .org.

	//za provjeru validnosti email adrese koristiti globalnu funkciju ValidirajEmail, a unutar nje regex metode.
	//validacija email adrese ce se vrsiti unutar konstruktora klase Kandidat, a u slucaju da nije validna
	//postaviti je na defaultnu adresu: notSet@edu.fit.ba
	//*/



	Kandidat jasmin("Jasmin Azemovic", "jasmin@fit.ba", "033 281 172");
	Kandidat adel("Adel Handzic", "adel@edu.fit.ba", "033 281 170");
	Kandidat emailNotValid("Ime Prezime", "korisnik@klix.ba", "033 281 170");

	//cout << jasmin << adel << emailNotValid << endl;

	/*
	uspjeh (tokom srednjoskolskog obrazovanja) se dodaje za svaki predmet na nivou razreda.
	tom prilikom onemoguciti:
	- dodavanje istih (moraju biti identicne vrijednosti svih clanova) predmeta na nivou jednog razreda,
	- dodavanje predmeta kod kojih je prosjecna ocjena manja od 2.5
	- dodavanje vise od 5 predmeta na nivou jednog razreda
	razredi (predmeti ili uspjeh) ne moraju biti dodavani sortiranim redoslijedom (npr. prvo se moze dodati uspjeh za II razred, pa onda za I razred i sl.).
	Funkcija vraca true ili false u zavisnosti od (ne)uspjesnost izvrsenja
	*/
	if (jasmin.AddPredmet(DRUGI, Fizika, "Napomena 1"))
		cout << "Predmet uspjesno dodan!" << crt;
	if (jasmin.AddPredmet(DRUGI, Hemija, "Napomena 2"))
		cout << "Predmet uspjesno dodan!" << crt;
	if (jasmin.AddPredmet(PRVI, Engleski, "Napomena 3"))
		cout << "Predmet uspjesno dodan!" << crt;
	if (jasmin.AddPredmet(PRVI, Matematika, "Napomena 4"))
		cout << "Predmet uspjesno dodan!" << crt;
	//ne treba dodati Matematiku jer je vec dodana u prvom razredu
	if (jasmin.AddPredmet(PRVI, Matematika, "Napomena 5"))
		cout << "Predmet uspjesno dodan!" << crt;

	/*nakon evidentiranja uspjeha na bilo kojem predmetu kandidatu se salje email sa porukom:
	FROM:info@fit.ba
	TO: emailKorisnika
	Postovani ime i prezime, evidentirali ste uspjeh za X razred. Dosadasnji uspjeh (prosjek)
	na nivou X razreda iznosi Y, a ukupni uspjeh u toku skolovanja iznosi Z.
	Pozdrav.
	FIT Team.
	ukoliko je prosjek na nivou tog razreda veci od 4.5 kandidatu se salje SMS sa porukom: "Svaka cast za uspjeh 4.X u X razredu".
	slanje poruka i emailova implemenitrati koristeci zasebne thread-ove.
	*/
	cout << jasmin << crt;

	//vraca kolekciju predmeta koji sadrze najmanje jednu ocjenu evidentiranu u periodu izmedju proslijedjenih datuma
	//float se odnosi na prosjecan broj dana izmedju ostvarenih ocjena na predmetu
	Kolekcija<Predmet, float> jasminUspjeh = jasmin(Datum(18, 06, 2019), Datum(21, 06, 2019));
	cout << " JASMIN USPJEH " << crt << jasminUspjeh << crt;

	Uspjeh* uspjeh_Irazred = jasmin[PRVI];//vraca uspjeh kandidata ostvaren u prvom razredu
	if (uspjeh_Irazred != nullptr)
		cout << *uspjeh_Irazred << crt;

	//cin.get();
	system("pause>0");
}
